using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static GeneratorsLibrary.StringUtilities;

namespace GeneratorsLibrary
{
    public class EnumGenerator
    {
        public string NamespaceOfEnum { get; set; }
        public string NamespaceOfEnumConverter { get; set; }
        public string NameOfEnum { get; set; }
        public string CommentOfEnum { get; set; }
        public List<string> EnumElements { get; set; } = new List<string>();
        public List<string> EnumComments { get; set; } = new List<string>();

        public EnumGenerator()
        {

        }
        public EnumGenerator(string enumName, string enumComment, List<string> enumElements, List<string> enumComments)
            : this()
        {
            NameOfEnum = enumName;
            CommentOfEnum = enumComment;
            EnumElements = enumElements;
            EnumComments = enumComments;
        }
        public EnumGenerator(string values)
            : this()
        {
            ParseText(values);
        }
        public void ParseText(string values)
        {
            var tmp = new string(values.Where(c=>c!='\r').ToArray()).Split('\n');
            NamespaceOfEnum = tmp[0];
            NamespaceOfEnumConverter = tmp[1];
            CommentOfEnum = tmp[2];
            NameOfEnum = tmp[3];
            for (int i = 4; i < tmp.Length; i++)
            {
                if (i % 2 == 0)
                {
                    EnumComments.Add(tmp[i]);
                }
                else
                {
                    EnumElements.Add(tmp[i]);
                }
            }
        }
        public string GetEnumText()
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine($"//Generated by EnumGenerator, {DateTime.Now}");
            stringBuilder.AppendLine("using System;");
            stringBuilder.AppendLine();
            stringBuilder.AppendLine($"namespace {NamespaceOfEnum}");
            stringBuilder.AppendLine("{");
            stringBuilder.AppendLine("\t/// <summary>");
            stringBuilder.AppendLine($"\t/// {CommentOfEnum}");
            stringBuilder.AppendLine("\t/// </summary>");
            stringBuilder.AppendLine("\t[Serializable]");
            stringBuilder.AppendLine($"\tpublic enum {NameOfEnum}");
            stringBuilder.AppendLine("\t{");
            for (int i = 0; i < EnumElements.Count; i++)
            {
                stringBuilder.AppendLine("\t\t/// <summary>");
                stringBuilder.AppendLine($"\t\t/// {EnumComments[i]}");
                stringBuilder.AppendLine("\t\t/// </summary>");
                stringBuilder.AppendLine($"\t\t{EnumElements[i]},");
            }
            stringBuilder.AppendLine("\t}");
            stringBuilder.AppendLine("}");
            return stringBuilder.ToString();
        }
        public string GetEnumStringConverterText(bool needMaxPerfomance = false)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine($"//Generated by EnumGenerator, {DateTime.Now}");
            stringBuilder.AppendLine($"using {NamespaceOfEnum};");
            stringBuilder.AppendLine("using System.Collections.Generic;");
            stringBuilder.AppendLine("using System.Linq;");
            stringBuilder.AppendLine();
            stringBuilder.AppendLine($"namespace {NamespaceOfEnumConverter}");
            stringBuilder.AppendLine("{");
            stringBuilder.AppendLine("\t/// <summary>");
            stringBuilder.AppendLine($"\t/// Класс-преобразователь перечисления {NameOfEnum} в строку и обратно");
            stringBuilder.AppendLine("\t/// </summary>");
            stringBuilder.AppendLine($"\tpublic class {NameOfEnum}Strings : IEnumStrings<{NameOfEnum}>");
            stringBuilder.AppendLine("\t{");
            if (!needMaxPerfomance)
            {
                stringBuilder.AppendLine($"\t\t public static Dictionary<{NameOfEnum}, string> Strings =");
                stringBuilder.AppendLine($"\t\t\t new Dictionary<{NameOfEnum}, string> {{");
                for (int i = 0; i < EnumElements.Count; i++)
                {
                    stringBuilder.AppendLine($"\t\t\t\t {{ {NameOfEnum}.{EnumElements[i]},\"{EnumComments[i]}\" }},");
                }
                stringBuilder.AppendLine("\t\t\t};");
                stringBuilder.AppendLine($"\t\tpublic {NameOfEnum}Strings() {{ }}");
                stringBuilder.AppendLine($"\t\tprivate static {NameOfEnum}Strings instance;");
                stringBuilder.AppendLine($"\t\tpublic static {NameOfEnum}Strings Instance");
                stringBuilder.AppendLine($"\t\t{{");
                stringBuilder.AppendLine($"\t\t\tget");
                stringBuilder.AppendLine($"\t\t\t{{");
                stringBuilder.AppendLine($"\t\t\t\tif (instance == null)");
                stringBuilder.AppendLine($"\t\t\t\t{{");
                stringBuilder.AppendLine($"\t\t\t\t\tinstance = new {NameOfEnum}Strings();");
                stringBuilder.AppendLine($"\t\t\t\t}}");
                stringBuilder.AppendLine($"\t\t\t\treturn instance;");
                stringBuilder.AppendLine($"\t\t\t}}");
                stringBuilder.AppendLine($"\t\t}}");
                stringBuilder.AppendLine();
                var nameOfParam = CamelCaseToUnderscore(NameOfEnum);
                stringBuilder.AppendLine($"\t\tpublic string GetName({NameOfEnum} {nameOfParam})");
                stringBuilder.AppendLine($"\t\t{{");
                stringBuilder.AppendLine($"\t\t\treturn Strings[{nameOfParam}];");
                stringBuilder.AppendLine($"\t\t}}");
                stringBuilder.AppendLine($"\t\tpublic {NameOfEnum} GetElement(string name)");
                stringBuilder.AppendLine($"\t\t{{");
                stringBuilder.AppendLine($"\t\t\treturn Strings.FirstOrDefault(s => s.Value == name).Key;");
                stringBuilder.AppendLine($"\t\t}}");
            }
            else
            {
                for (int i = 0; i < EnumElements.Count; i++)
                {
                    stringBuilder.AppendLine($"\t\tprivate static readonly string _{CamelCaseToUnderscore(EnumElements[i])} = \"{EnumComments[i]}\";");
                }
                stringBuilder.AppendLine();
                stringBuilder.AppendLine($"\t\tpublic {NameOfEnum}Strings() {{ }}");
                stringBuilder.AppendLine($"\t\tprivate static {NameOfEnum}Strings instance;");
                stringBuilder.AppendLine($"\t\tpublic static {NameOfEnum}Strings Instance");
                stringBuilder.AppendLine($"\t\t{{");
                stringBuilder.AppendLine($"\t\t\tget");
                stringBuilder.AppendLine($"\t\t\t{{");
                stringBuilder.AppendLine($"\t\t\t\tif (instance == null)");
                stringBuilder.AppendLine($"\t\t\t\t{{");
                stringBuilder.AppendLine($"\t\t\t\t\tinstance = new {NameOfEnum}Strings();");
                stringBuilder.AppendLine($"\t\t\t\t}}");
                stringBuilder.AppendLine($"\t\t\t\treturn instance;");
                stringBuilder.AppendLine($"\t\t\t}}");
                stringBuilder.AppendLine($"\t\t}}");
                stringBuilder.AppendLine();
                var nameOfParam = CamelCaseToUnderscore(NameOfEnum);
                stringBuilder.AppendLine($"\t\tpublic string GetName({NameOfEnum} {nameOfParam})");
                stringBuilder.AppendLine($"\t\t{{");
                stringBuilder.AppendLine($"\t\t\tswitch({nameOfParam})");
                stringBuilder.AppendLine($"\t\t\t{{");
                for (int i = 0; i < EnumElements.Count; i++)
                {
                    stringBuilder.AppendLine($"\t\t\t\tcase {NameOfEnum}.{EnumElements[i]}:");
                    stringBuilder.AppendLine($"\t\t\t\t\treturn _{CamelCaseToUnderscore(EnumElements[i])};");
                }
                stringBuilder.AppendLine($"\t\t\t\tdefault:");
                stringBuilder.AppendLine($"\t\t\t\t\tbreak;");
                stringBuilder.AppendLine($"\t\t\t}}");
                stringBuilder.AppendLine($"\t\t\treturn null;");
                stringBuilder.AppendLine($"\t\t}}");
                stringBuilder.AppendLine();
                stringBuilder.AppendLine($"\t\tpublic {NameOfEnum} GetElement(string name)");
                stringBuilder.AppendLine($"\t\t{{");
                for (int i = 0; i < EnumElements.Count; i++)
                {
                    stringBuilder.AppendLine($"\t\t\tif (name == _{CamelCaseToUnderscore(EnumElements[i])})");
                    stringBuilder.AppendLine($"\t\t\t\treturn {NameOfEnum}.{EnumElements[i]};");
                }
                stringBuilder.AppendLine($"\t\t\treturn {NameOfEnum}.{EnumElements[EnumElements.Count-1]};");
                stringBuilder.AppendLine($"\t\t}}");
            }
            stringBuilder.AppendLine("\t}");
            stringBuilder.AppendLine("}");
            return stringBuilder.ToString();
        }
    }
}
