//Generated by EnumGenerator, 26.08.2020 11:39:27
using ITS.Core.Bridges.Domain.Enums;
using System.Collections.Generic;
using System.Linq;

namespace ITS.Core.Bridges.Domain.EnumStrings
{
	/// <summary>
	/// Класс-преобразователь перечисления ExpansionJointType в строку и обратно
	/// </summary>
	public class ExpansionJointTypeStrings : IEnumStrings<ExpansionJointType>
	{
		private static readonly string StrOpened = "Открытый";
		private static readonly string StrClosed = "Закрытый";
		private static readonly string StrFilled = "Заполненный";
		private static readonly string StrOverlapped = "Перекрытый";
		private static readonly string StrRetractable = "Откатный";
		private static readonly string StrNoData = "Нет данных";

		public ExpansionJointTypeStrings() { }
		private static ExpansionJointTypeStrings instance;
		public static ExpansionJointTypeStrings Instance
		{
			get
			{
				if (instance == null)
				{
					instance = new ExpansionJointTypeStrings();
				}
				return instance;
			}
		}

		public string GetName(ExpansionJointType expansion_joint_type)
		{
			switch(expansion_joint_type)
			{
				case ExpansionJointType.Opened:
					return StrOpened;
				case ExpansionJointType.Closed:
					return StrClosed;
				case ExpansionJointType.Filled:
					return StrFilled;
				case ExpansionJointType.Overlapped:
					return StrOverlapped;
				case ExpansionJointType.Retractable:
					return StrRetractable;
				case ExpansionJointType.NoData:
					return StrNoData;
				default:
					break;
			}
			return null;
		}

		public ExpansionJointType GetElement(string name)
		{
			if (name == StrOpened)
				return ExpansionJointType.Opened;
			if (name == StrClosed)
				return ExpansionJointType.Closed;
			if (name == StrFilled)
				return ExpansionJointType.Filled;
			if (name == StrOverlapped)
				return ExpansionJointType.Overlapped;
			if (name == StrRetractable)
				return ExpansionJointType.Retractable;
			if (name == StrNoData)
				return ExpansionJointType.NoData;
			return ExpansionJointType.NoData;
		}
	}
}
