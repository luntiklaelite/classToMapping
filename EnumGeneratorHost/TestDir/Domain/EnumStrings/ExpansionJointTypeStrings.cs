//Generated by EnumGenerator, 25.08.2020 16:05:57
using ITS.Core.Bridges.Domain.Enums;
using System.Collections.Generic;
using System.Linq;

namespace ITS.Core.Bridges.Domain.EnumStrings
{
	/// <summary>
	/// Класс-преобразователь перечисления ExpansionJointType в строку и обратно
	/// </summary>
	public class ExpansionJointTypeStrings : IEnumStrings<ExpansionJointType>
	{
		private static readonly string _opened = "Открытый";
		private static readonly string _closed = "Закрытый";
		private static readonly string _filled = "Заполненный";
		private static readonly string _overlapped = "Перекрытый";
		private static readonly string _retractable = "Откатный";
		private static readonly string _no_data = "Нет данных";

		public ExpansionJointTypeStrings() { }
		private static ExpansionJointTypeStrings instance;
		public static ExpansionJointTypeStrings Instance
		{
			get
			{
				if (instance == null)
				{
					instance = new ExpansionJointTypeStrings();
				}
				return instance;
			}
		}

		public string GetName(ExpansionJointType expansion_joint_type)
		{
			switch(expansion_joint_type)
			{
				case ExpansionJointType.Opened:
					return _opened;
				case ExpansionJointType.Closed:
					return _closed;
				case ExpansionJointType.Filled:
					return _filled;
				case ExpansionJointType.Overlapped:
					return _overlapped;
				case ExpansionJointType.Retractable:
					return _retractable;
				case ExpansionJointType.NoData:
					return _no_data;
				default:
					break;
			}
			return null;
		}

		public ExpansionJointType GetElement(string name)
		{
			if (name == _opened)
				return ExpansionJointType.Opened;
			if (name == _closed)
				return ExpansionJointType.Closed;
			if (name == _filled)
				return ExpansionJointType.Filled;
			if (name == _overlapped)
				return ExpansionJointType.Overlapped;
			if (name == _retractable)
				return ExpansionJointType.Retractable;
			if (name == _no_data)
				return ExpansionJointType.NoData;
			return ExpansionJointType.NoData;
		}
	}
}
