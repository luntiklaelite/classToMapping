//Generated by EnumGenerator, 22.09.2020 12:17:50
using System;
using System.Text;

namespace ITS.Core.Bridges.Domain.Enums
{
	/// <summary>
	/// Класс-преобразователь перечисления ExpansionJointType в строку и обратно
	/// </summary>
	public class ExpansionJointTypeStrings : IEnumStrings<ExpansionJointType>
	{
		/// <summary>
		/// Opened
		/// </summary>
		private static readonly string StrОткрытый = "Opened";
		/// <summary>
		/// Closed
		/// </summary>
		private static readonly string StrЗакрытый = "Closed";
		/// <summary>
		/// Filled
		/// </summary>
		private static readonly string StrЗаполненный = "Filled";
		/// <summary>
		/// Overlapped
		/// </summary>
		private static readonly string StrПерекрытый = "Overlapped";
		/// <summary>
		/// Retractable
		/// </summary>
		private static readonly string StrОткатный = "Retractable";
		/// <summary>
		/// NoData
		/// </summary>
		private static readonly string StrНет данных = "NoData";

		public ExpansionJointTypeStrings() { }
		private static ExpansionJointTypeStrings instance;
		public static ExpansionJointTypeStrings Instance
			=> instance ?? (instance = new ExpansionJointTypeStrings());

		public string GetName(ExpansionJointType enumElement)
		{
			switch(enumElement)
			{
				case ExpansionJointType.Открытый:
					return StrОткрытый;
				case ExpansionJointType.Закрытый:
					return StrЗакрытый;
				case ExpansionJointType.Заполненный:
					return StrЗаполненный;
				case ExpansionJointType.Перекрытый:
					return StrПерекрытый;
				case ExpansionJointType.Откатный:
					return StrОткатный;
				case ExpansionJointType.Нет данных:
					return StrНет данных;
			}
			throw new ArgumentException("Некорректный элемент перечисления", "enumElement");
		}

		public ExpansionJointType GetElement(string name)
		{
			if (name == StrОткрытый)
				return ExpansionJointType.Открытый;
			if (name == StrЗакрытый)
				return ExpansionJointType.Закрытый;
			if (name == StrЗаполненный)
				return ExpansionJointType.Заполненный;
			if (name == StrПерекрытый)
				return ExpansionJointType.Перекрытый;
			if (name == StrОткатный)
				return ExpansionJointType.Откатный;
			if (name == StrНет данных)
				return ExpansionJointType.Нет данных;
			throw new ArgumentException("Некорректная входная строка", "name");
		}
	}
}
