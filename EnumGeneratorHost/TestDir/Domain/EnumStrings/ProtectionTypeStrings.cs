//Generated by EnumGenerator, 22.09.2020 12:17:50
using System;
using System.Text;

namespace ITS.Core.Bridges.Domain.Enums
{
	/// <summary>
	/// Класс-преобразователь перечисления ProtectionType в строку и обратно
	/// </summary>
	public class ProtectionTypeStrings : IEnumStrings<ProtectionType>
	{
		/// <summary>
		/// Parapet
		/// </summary>
		private static readonly string StrПарапетное = "Parapet";
		/// <summary>
		/// Barrier
		/// </summary>
		private static readonly string StrБарьерное = "Barrier";
		/// <summary>
		/// Border
		/// </summary>
		private static readonly string StrБордюрное = "Border";
		/// <summary>
		/// Cable
		/// </summary>
		private static readonly string StrТросовое = "Cable";
		/// <summary>
		/// Combined
		/// </summary>
		private static readonly string StrКомбинированное = "Combined";
		/// <summary>
		/// NoData
		/// </summary>
		private static readonly string StrНет данных = "NoData";

		public ProtectionTypeStrings() { }
		private static ProtectionTypeStrings instance;
		public static ProtectionTypeStrings Instance
			=> instance ?? (instance = new ProtectionTypeStrings());

		public string GetName(ProtectionType enumElement)
		{
			switch(enumElement)
			{
				case ProtectionType.Парапетное:
					return StrПарапетное;
				case ProtectionType.Барьерное:
					return StrБарьерное;
				case ProtectionType.Бордюрное:
					return StrБордюрное;
				case ProtectionType.Тросовое:
					return StrТросовое;
				case ProtectionType.Комбинированное:
					return StrКомбинированное;
				case ProtectionType.Нет данных:
					return StrНет данных;
			}
			throw new ArgumentException("Некорректный элемент перечисления", "enumElement");
		}

		public ProtectionType GetElement(string name)
		{
			if (name == StrПарапетное)
				return ProtectionType.Парапетное;
			if (name == StrБарьерное)
				return ProtectionType.Барьерное;
			if (name == StrБордюрное)
				return ProtectionType.Бордюрное;
			if (name == StrТросовое)
				return ProtectionType.Тросовое;
			if (name == StrКомбинированное)
				return ProtectionType.Комбинированное;
			if (name == StrНет данных)
				return ProtectionType.Нет данных;
			throw new ArgumentException("Некорректная входная строка", "name");
		}
	}
}
