//Generated by EnumGenerator, 26.08.2020 10:15:25
using ITS.Core.Bridges.Domain.Enums;
using System.Collections.Generic;
using System.Linq;

namespace ITS.Core.Bridges.Domain.EnumStrings
{
	/// <summary>
	/// Класс-преобразователь перечисления ProtectionType в строку и обратно
	/// </summary>
	public class ProtectionTypeStrings : IEnumStrings<ProtectionType>
	{
		private static readonly string StrParapet = "Парапетное";
		private static readonly string StrBarrier = "Барьерное";
		private static readonly string StrBorder = "Бордюрное";
		private static readonly string StrCable = "Тросовое";
		private static readonly string StrCombined = "Комбинированное";
		private static readonly string StrNoData = "Нет данных";

		public ProtectionTypeStrings() { }
		private static ProtectionTypeStrings instance;
		public static ProtectionTypeStrings Instance
		{
			get
			{
				if (instance == null)
				{
					instance = new ProtectionTypeStrings();
				}
				return instance;
			}
		}

		public string GetName(ProtectionType protection_type)
		{
			switch(protection_type)
			{
				case ProtectionType.Parapet:
					return StrParapet;
				case ProtectionType.Barrier:
					return StrBarrier;
				case ProtectionType.Border:
					return StrBorder;
				case ProtectionType.Cable:
					return StrCable;
				case ProtectionType.Combined:
					return StrCombined;
				case ProtectionType.NoData:
					return StrNoData;
				default:
					break;
			}
			return null;
		}

		public ProtectionType GetElement(string name)
		{
			if (name == StrParapet)
				return ProtectionType.Parapet;
			if (name == StrBarrier)
				return ProtectionType.Barrier;
			if (name == StrBorder)
				return ProtectionType.Border;
			if (name == StrCable)
				return ProtectionType.Cable;
			if (name == StrCombined)
				return ProtectionType.Combined;
			if (name == StrNoData)
				return ProtectionType.NoData;
			return ProtectionType.NoData;
		}
	}
}
