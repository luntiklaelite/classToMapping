//Generated by EnumGenerator, 25.08.2020 16:05:57
using ITS.Core.Bridges.Domain.Enums;
using System.Collections.Generic;
using System.Linq;

namespace ITS.Core.Bridges.Domain.EnumStrings
{
	/// <summary>
	/// Класс-преобразователь перечисления ProtectionType в строку и обратно
	/// </summary>
	public class ProtectionTypeStrings : IEnumStrings<ProtectionType>
	{
		private static readonly string _parapet = "Парапетное";
		private static readonly string _barrier = "Барьерное";
		private static readonly string _border = "Бордюрное";
		private static readonly string _cable = "Тросовое";
		private static readonly string _combined = "Комбинированное";
		private static readonly string _no_data = "Нет данных";

		public ProtectionTypeStrings() { }
		private static ProtectionTypeStrings instance;
		public static ProtectionTypeStrings Instance
		{
			get
			{
				if (instance == null)
				{
					instance = new ProtectionTypeStrings();
				}
				return instance;
			}
		}

		public string GetName(ProtectionType protection_type)
		{
			switch(protection_type)
			{
				case ProtectionType.Parapet:
					return _parapet;
				case ProtectionType.Barrier:
					return _barrier;
				case ProtectionType.Border:
					return _border;
				case ProtectionType.Cable:
					return _cable;
				case ProtectionType.Combined:
					return _combined;
				case ProtectionType.NoData:
					return _no_data;
				default:
					break;
			}
			return null;
		}

		public ProtectionType GetElement(string name)
		{
			if (name == _parapet)
				return ProtectionType.Parapet;
			if (name == _barrier)
				return ProtectionType.Barrier;
			if (name == _border)
				return ProtectionType.Border;
			if (name == _cable)
				return ProtectionType.Cable;
			if (name == _combined)
				return ProtectionType.Combined;
			if (name == _no_data)
				return ProtectionType.NoData;
			return ProtectionType.NoData;
		}
	}
}
