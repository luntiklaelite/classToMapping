//Generated by EnumGenerator, 25.08.2020 10:59:08
using ITS.Core.Bridges.Domain.Enums;
using System.Collections.Generic;
using System.Linq;

namespace ITS.Core.Bridges.Domain.EnumStrings
{
	/// <summary>
	/// Класс-преобразователь перечисления DrainageType в строку и обратно
	/// </summary>
	public class DrainageTypeStrings : IEnumStrings<DrainageType>
	{
		 public static Dictionary<DrainageType, string> Strings =
			 new Dictionary<DrainageType, string> {
				 { DrainageType.None,"Водоотвод не организован" },
				 { DrainageType.DrainPipesDischargeUnderBridge,"Через водоотводные трубки со сбросом под мостовое сооружение" },
				 { DrainageType.DrainPipesWaterSupply,"Через водоотводные трубки с отводом воды по водопроводу (лотку, трубе) вдоль мостового сооружения" },
				 { DrainageType.WaterSlopes,"Сток воды вдоль проезжей части за счет уклонов за пределы мостового сооружения" },
				 { DrainageType.WaterDischargeSidewalks,"Сброс воды поперек мостового сооружения через тротуары" },
				 { DrainageType.ByTrays,"По лоткам (продольным или поперечным) за пределы мостового сооружения" },
				 { DrainageType.TheGapsCarriageway,"Через зазоры в проезжей части мостового сооружения (дощатый настил и т. д.)" },
				 { DrainageType.Combined,"Комбинированный (например, за счет уклонов и лотков)" },
				 { DrainageType.NoData,"Нет данных" },
			};
		public DrainageTypeStrings() { }
		private static DrainageTypeStrings instance;
		public static DrainageTypeStrings Instance
		{
			get
			{
				if (instance == null)
				{
					instance = new DrainageTypeStrings();
				}
				return instance;
			}
		}

		public string GetName(DrainageType drainage_type)
		{
			return Strings[drainage_type];
		}
		public DrainageType GetElement(string name)
		{
			return Strings.FirstOrDefault(s => s.Value == name).Key;
		}
	}
}
