//Generated by EnumGenerator, 25.08.2020 16:05:57
using ITS.Core.Bridges.Domain.Enums;
using System.Collections.Generic;
using System.Linq;

namespace ITS.Core.Bridges.Domain.EnumStrings
{
	/// <summary>
	/// Класс-преобразователь перечисления DrainageType в строку и обратно
	/// </summary>
	public class DrainageTypeStrings : IEnumStrings<DrainageType>
	{
		private static readonly string _none = "Водоотвод не организован";
		private static readonly string _drain_pipes_discharge_under_bridge = "Через водоотводные трубки со сбросом под мостовое сооружение";
		private static readonly string _drain_pipes_water_supply = "Через водоотводные трубки с отводом воды по водопроводу (лотку, трубе) вдоль мостового сооружения";
		private static readonly string _water_slopes = "Сток воды вдоль проезжей части за счет уклонов за пределы мостового сооружения";
		private static readonly string _water_discharge_sidewalks = "Сброс воды поперек мостового сооружения через тротуары";
		private static readonly string _by_trays = "По лоткам (продольным или поперечным) за пределы мостового сооружения";
		private static readonly string _the_gaps_carriageway = "Через зазоры в проезжей части мостового сооружения (дощатый настил и т. д.)";
		private static readonly string _combined = "Комбинированный (например, за счет уклонов и лотков)";
		private static readonly string _no_data = "Нет данных";

		public DrainageTypeStrings() { }
		private static DrainageTypeStrings instance;
		public static DrainageTypeStrings Instance
		{
			get
			{
				if (instance == null)
				{
					instance = new DrainageTypeStrings();
				}
				return instance;
			}
		}

		public string GetName(DrainageType drainage_type)
		{
			switch(drainage_type)
			{
				case DrainageType.None:
					return _none;
				case DrainageType.DrainPipesDischargeUnderBridge:
					return _drain_pipes_discharge_under_bridge;
				case DrainageType.DrainPipesWaterSupply:
					return _drain_pipes_water_supply;
				case DrainageType.WaterSlopes:
					return _water_slopes;
				case DrainageType.WaterDischargeSidewalks:
					return _water_discharge_sidewalks;
				case DrainageType.ByTrays:
					return _by_trays;
				case DrainageType.TheGapsCarriageway:
					return _the_gaps_carriageway;
				case DrainageType.Combined:
					return _combined;
				case DrainageType.NoData:
					return _no_data;
				default:
					break;
			}
			return null;
		}

		public DrainageType GetElement(string name)
		{
			if (name == _none)
				return DrainageType.None;
			if (name == _drain_pipes_discharge_under_bridge)
				return DrainageType.DrainPipesDischargeUnderBridge;
			if (name == _drain_pipes_water_supply)
				return DrainageType.DrainPipesWaterSupply;
			if (name == _water_slopes)
				return DrainageType.WaterSlopes;
			if (name == _water_discharge_sidewalks)
				return DrainageType.WaterDischargeSidewalks;
			if (name == _by_trays)
				return DrainageType.ByTrays;
			if (name == _the_gaps_carriageway)
				return DrainageType.TheGapsCarriageway;
			if (name == _combined)
				return DrainageType.Combined;
			if (name == _no_data)
				return DrainageType.NoData;
			return DrainageType.NoData;
		}
	}
}
