//Generated by EnumGenerator, 22.09.2020 12:17:50
using System;
using System.Text;

namespace ITS.Core.Bridges.Domain.Enums
{
	/// <summary>
	/// Класс-преобразователь перечисления DrainageType в строку и обратно
	/// </summary>
	public class DrainageTypeStrings : IEnumStrings<DrainageType>
	{
		/// <summary>
		/// None
		/// </summary>
		private static readonly string StrВодоотвод не организован = "None";
		/// <summary>
		/// DrainPipesDischargeUnderBridge
		/// </summary>
		private static readonly string StrЧерез водоотводные трубки со сбросом под мостовое сооружение = "DrainPipesDischargeUnderBridge";
		/// <summary>
		/// DrainPipesWaterSupply
		/// </summary>
		private static readonly string StrЧерез водоотводные трубки с отводом воды по водопроводу (лотку, трубе) вдоль мостового сооружения = "DrainPipesWaterSupply";
		/// <summary>
		/// WaterSlopes
		/// </summary>
		private static readonly string StrСток воды вдоль проезжей части за счет уклонов за пределы мостового сооружения = "WaterSlopes";
		/// <summary>
		/// WaterDischargeSidewalks
		/// </summary>
		private static readonly string StrСброс воды поперек мостового сооружения через тротуары = "WaterDischargeSidewalks";
		/// <summary>
		/// ByTrays
		/// </summary>
		private static readonly string StrПо лоткам (продольным или поперечным) за пределы мостового сооружения = "ByTrays";
		/// <summary>
		/// TheGapsCarriageway
		/// </summary>
		private static readonly string StrЧерез зазоры в проезжей части мостового сооружения (дощатый настил и т. д.) = "TheGapsCarriageway";
		/// <summary>
		/// Combined
		/// </summary>
		private static readonly string StrКомбинированный (например, за счет уклонов и лотков) = "Combined";
		/// <summary>
		/// NoData
		/// </summary>
		private static readonly string StrНет данных = "NoData";

		public DrainageTypeStrings() { }
		private static DrainageTypeStrings instance;
		public static DrainageTypeStrings Instance
			=> instance ?? (instance = new DrainageTypeStrings());

		public string GetName(DrainageType enumElement)
		{
			switch(enumElement)
			{
				case DrainageType.Водоотвод не организован:
					return StrВодоотвод не организован;
				case DrainageType.Через водоотводные трубки со сбросом под мостовое сооружение:
					return StrЧерез водоотводные трубки со сбросом под мостовое сооружение;
				case DrainageType.Через водоотводные трубки с отводом воды по водопроводу (лотку, трубе) вдоль мостового сооружения:
					return StrЧерез водоотводные трубки с отводом воды по водопроводу (лотку, трубе) вдоль мостового сооружения;
				case DrainageType.Сток воды вдоль проезжей части за счет уклонов за пределы мостового сооружения:
					return StrСток воды вдоль проезжей части за счет уклонов за пределы мостового сооружения;
				case DrainageType.Сброс воды поперек мостового сооружения через тротуары:
					return StrСброс воды поперек мостового сооружения через тротуары;
				case DrainageType.По лоткам (продольным или поперечным) за пределы мостового сооружения:
					return StrПо лоткам (продольным или поперечным) за пределы мостового сооружения;
				case DrainageType.Через зазоры в проезжей части мостового сооружения (дощатый настил и т. д.):
					return StrЧерез зазоры в проезжей части мостового сооружения (дощатый настил и т. д.);
				case DrainageType.Комбинированный (например, за счет уклонов и лотков):
					return StrКомбинированный (например, за счет уклонов и лотков);
				case DrainageType.Нет данных:
					return StrНет данных;
			}
			throw new ArgumentException("Некорректный элемент перечисления", "enumElement");
		}

		public DrainageType GetElement(string name)
		{
			if (name == StrВодоотвод не организован)
				return DrainageType.Водоотвод не организован;
			if (name == StrЧерез водоотводные трубки со сбросом под мостовое сооружение)
				return DrainageType.Через водоотводные трубки со сбросом под мостовое сооружение;
			if (name == StrЧерез водоотводные трубки с отводом воды по водопроводу (лотку, трубе) вдоль мостового сооружения)
				return DrainageType.Через водоотводные трубки с отводом воды по водопроводу (лотку, трубе) вдоль мостового сооружения;
			if (name == StrСток воды вдоль проезжей части за счет уклонов за пределы мостового сооружения)
				return DrainageType.Сток воды вдоль проезжей части за счет уклонов за пределы мостового сооружения;
			if (name == StrСброс воды поперек мостового сооружения через тротуары)
				return DrainageType.Сброс воды поперек мостового сооружения через тротуары;
			if (name == StrПо лоткам (продольным или поперечным) за пределы мостового сооружения)
				return DrainageType.По лоткам (продольным или поперечным) за пределы мостового сооружения;
			if (name == StrЧерез зазоры в проезжей части мостового сооружения (дощатый настил и т. д.))
				return DrainageType.Через зазоры в проезжей части мостового сооружения (дощатый настил и т. д.);
			if (name == StrКомбинированный (например, за счет уклонов и лотков))
				return DrainageType.Комбинированный (например, за счет уклонов и лотков);
			if (name == StrНет данных)
				return DrainageType.Нет данных;
			throw new ArgumentException("Некорректная входная строка", "name");
		}
	}
}
