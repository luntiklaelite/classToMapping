//Generated by EnumGenerator, 22.09.2020 12:43:25
using System;
using System.Text;

namespace ITS.Core.Bridges.Domain.Enums
{
	/// <summary>
	/// Класс-преобразователь перечисления ConstructionRoadway в строку и обратно
	/// </summary>
	public class ConstructionRoadwayStrings : IEnumStrings<ConstructionRoadway>
	{
		/// <summary>
		/// Железобетонная плита в составе основной несущей железобетонной конструкции
		/// </summary>
		private static readonly string StrFerroconcreteSlabInMainSupStruct = "Железобетонная плита в составе основной несущей железобетонной конструкции";
		/// <summary>
		/// Железобетонная плита, включенная в совместную работу с металлическими главными балками (в сталежелезобетонных пролетных строениях)
		/// </summary>
		private static readonly string StrFerroconcreteSlabWithPiles = "Железобетонная плита, включенная в совместную работу с металлическими главными балками (в сталежелезобетонных пролетных строениях)";
		/// <summary>
		/// Железобетонная плита по балкам без объединения
		/// </summary>
		private static readonly string StrFerroconcreteSlabOnPiles = "Железобетонная плита по балкам без объединения";
		/// <summary>
		/// Ортотропная плита в составе главных и поперечных балок
		/// </summary>
		private static readonly string StrOrthotropicSlab = "Ортотропная плита в составе главных и поперечных балок";
		/// <summary>
		/// Деревянная
		/// </summary>
		private static readonly string StrWood = "Деревянная";
		/// <summary>
		/// Нет данных
		/// </summary>
		private static readonly string StrNoData = "Нет данных";

		public ConstructionRoadwayStrings() { }
		private static ConstructionRoadwayStrings instance;
		public static ConstructionRoadwayStrings Instance
			=> instance ?? (instance = new ConstructionRoadwayStrings());

		public string GetName(ConstructionRoadway enumElement)
		{
			switch(enumElement)
			{
				case ConstructionRoadway.FerroconcreteSlabInMainSupStruct:
					return StrFerroconcreteSlabInMainSupStruct;
				case ConstructionRoadway.FerroconcreteSlabWithPiles:
					return StrFerroconcreteSlabWithPiles;
				case ConstructionRoadway.FerroconcreteSlabOnPiles:
					return StrFerroconcreteSlabOnPiles;
				case ConstructionRoadway.OrthotropicSlab:
					return StrOrthotropicSlab;
				case ConstructionRoadway.Wood:
					return StrWood;
				case ConstructionRoadway.NoData:
					return StrNoData;
			}
			throw new ArgumentException("Некорректный элемент перечисления", "enumElement");
		}

		public ConstructionRoadway GetElement(string name)
		{
			if (name == StrFerroconcreteSlabInMainSupStruct)
				return ConstructionRoadway.FerroconcreteSlabInMainSupStruct;
			if (name == StrFerroconcreteSlabWithPiles)
				return ConstructionRoadway.FerroconcreteSlabWithPiles;
			if (name == StrFerroconcreteSlabOnPiles)
				return ConstructionRoadway.FerroconcreteSlabOnPiles;
			if (name == StrOrthotropicSlab)
				return ConstructionRoadway.OrthotropicSlab;
			if (name == StrWood)
				return ConstructionRoadway.Wood;
			if (name == StrNoData)
				return ConstructionRoadway.NoData;
			throw new ArgumentException("Некорректная входная строка", "name");
		}
	}
}
