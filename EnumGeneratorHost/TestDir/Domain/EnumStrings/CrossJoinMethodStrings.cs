//Generated by EnumGenerator, 22.09.2020 12:17:50
using System;
using System.Text;

namespace ITS.Core.Bridges.Domain.Enums
{
	/// <summary>
	/// Класс-преобразователь перечисления CrossJoinMethod в строку и обратно
	/// </summary>
	public class CrossJoinMethodStrings : IEnumStrings<CrossJoinMethod>
	{
		/// <summary>
		/// None
		/// </summary>
		private static readonly string StrНе объединены = "None";
		/// <summary>
		/// Dowels
		/// </summary>
		private static readonly string StrПо шпонкам = "Dowels";
		/// <summary>
		/// Diaphragms
		/// </summary>
		private static readonly string StrПо диафрагмам = "Diaphragms";
		/// <summary>
		/// Stove
		/// </summary>
		private static readonly string StrПо плите = "Stove";
		/// <summary>
		/// PlateAndDiaphragms
		/// </summary>
		private static readonly string StrПо плите и диафрагмам = "PlateAndDiaphragms";
		/// <summary>
		/// TransverseBeamsAndTies
		/// </summary>
		private static readonly string StrПо поперечным балкам и связям = "TransverseBeamsAndTies";
		/// <summary>
		/// LongitudinalAndTransverseLinks
		/// </summary>
		private static readonly string StrПо продольным и поперечным связям = "LongitudinalAndTransverseLinks";
		/// <summary>
		/// SlabAndCrossBraces
		/// </summary>
		private static readonly string StrПо плите и поперечным связям = "SlabAndCrossBraces";
		/// <summary>
		/// NoData
		/// </summary>
		private static readonly string StrНет данных = "NoData";

		public CrossJoinMethodStrings() { }
		private static CrossJoinMethodStrings instance;
		public static CrossJoinMethodStrings Instance
			=> instance ?? (instance = new CrossJoinMethodStrings());

		public string GetName(CrossJoinMethod enumElement)
		{
			switch(enumElement)
			{
				case CrossJoinMethod.Не объединены:
					return StrНе объединены;
				case CrossJoinMethod.По шпонкам:
					return StrПо шпонкам;
				case CrossJoinMethod.По диафрагмам:
					return StrПо диафрагмам;
				case CrossJoinMethod.По плите:
					return StrПо плите;
				case CrossJoinMethod.По плите и диафрагмам:
					return StrПо плите и диафрагмам;
				case CrossJoinMethod.По поперечным балкам и связям:
					return StrПо поперечным балкам и связям;
				case CrossJoinMethod.По продольным и поперечным связям:
					return StrПо продольным и поперечным связям;
				case CrossJoinMethod.По плите и поперечным связям:
					return StrПо плите и поперечным связям;
				case CrossJoinMethod.Нет данных:
					return StrНет данных;
			}
			throw new ArgumentException("Некорректный элемент перечисления", "enumElement");
		}

		public CrossJoinMethod GetElement(string name)
		{
			if (name == StrНе объединены)
				return CrossJoinMethod.Не объединены;
			if (name == StrПо шпонкам)
				return CrossJoinMethod.По шпонкам;
			if (name == StrПо диафрагмам)
				return CrossJoinMethod.По диафрагмам;
			if (name == StrПо плите)
				return CrossJoinMethod.По плите;
			if (name == StrПо плите и диафрагмам)
				return CrossJoinMethod.По плите и диафрагмам;
			if (name == StrПо поперечным балкам и связям)
				return CrossJoinMethod.По поперечным балкам и связям;
			if (name == StrПо продольным и поперечным связям)
				return CrossJoinMethod.По продольным и поперечным связям;
			if (name == StrПо плите и поперечным связям)
				return CrossJoinMethod.По плите и поперечным связям;
			if (name == StrНет данных)
				return CrossJoinMethod.Нет данных;
			throw new ArgumentException("Некорректная входная строка", "name");
		}
	}
}
