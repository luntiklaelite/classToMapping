//Generated by EnumGenerator, 22.09.2020 12:17:50
using System;
using System.Text;

namespace ITS.Core.Bridges.Domain.Enums
{
	/// <summary>
	/// Класс-преобразователь перечисления RegulatoryStructures в строку и обратно
	/// </summary>
	public class RegulatoryStructuresStrings : IEnumStrings<RegulatoryStructures>
	{
		/// <summary>
		/// JetGuideSlopeReinforcement
		/// </summary>
		private static readonly string StrСтруенаправляющая дамба с различными видами укрепления откосов = "JetGuideSlopeReinforcement";
		/// <summary>
		/// JetGuideWithTraverses
		/// </summary>
		private static readonly string StrСтруенаправляющая дамба с траверсами = "JetGuideWithTraverses";
		/// <summary>
		/// StrengtheningCoastVariousStructures
		/// </summary>
		private static readonly string StrУкрепление берега различными конструкциями = "StrengtheningCoastVariousStructures";
		/// <summary>
		/// JetGuideShoreReinforcement
		/// </summary>
		private static readonly string StrСтруенаправляющая дамба и укрепление берега = "JetGuideShoreReinforcement";
		/// <summary>
		/// Cone
		/// </summary>
		private static readonly string StrКонус = "Cone";
		/// <summary>
		/// RetainingOrFenceWall
		/// </summary>
		private static readonly string StrПодпорная или заборная стенка = "RetainingOrFenceWall";
		/// <summary>
		/// None
		/// </summary>
		private static readonly string StrРегуляционных сооружений нет = "None";

		public RegulatoryStructuresStrings() { }
		private static RegulatoryStructuresStrings instance;
		public static RegulatoryStructuresStrings Instance
			=> instance ?? (instance = new RegulatoryStructuresStrings());

		public string GetName(RegulatoryStructures enumElement)
		{
			switch(enumElement)
			{
				case RegulatoryStructures.Струенаправляющая дамба с различными видами укрепления откосов:
					return StrСтруенаправляющая дамба с различными видами укрепления откосов;
				case RegulatoryStructures.Струенаправляющая дамба с траверсами:
					return StrСтруенаправляющая дамба с траверсами;
				case RegulatoryStructures.Укрепление берега различными конструкциями:
					return StrУкрепление берега различными конструкциями;
				case RegulatoryStructures.Струенаправляющая дамба и укрепление берега:
					return StrСтруенаправляющая дамба и укрепление берега;
				case RegulatoryStructures.Конус:
					return StrКонус;
				case RegulatoryStructures.Подпорная или заборная стенка:
					return StrПодпорная или заборная стенка;
				case RegulatoryStructures.Регуляционных сооружений нет:
					return StrРегуляционных сооружений нет;
			}
			throw new ArgumentException("Некорректный элемент перечисления", "enumElement");
		}

		public RegulatoryStructures GetElement(string name)
		{
			if (name == StrСтруенаправляющая дамба с различными видами укрепления откосов)
				return RegulatoryStructures.Струенаправляющая дамба с различными видами укрепления откосов;
			if (name == StrСтруенаправляющая дамба с траверсами)
				return RegulatoryStructures.Струенаправляющая дамба с траверсами;
			if (name == StrУкрепление берега различными конструкциями)
				return RegulatoryStructures.Укрепление берега различными конструкциями;
			if (name == StrСтруенаправляющая дамба и укрепление берега)
				return RegulatoryStructures.Струенаправляющая дамба и укрепление берега;
			if (name == StrКонус)
				return RegulatoryStructures.Конус;
			if (name == StrПодпорная или заборная стенка)
				return RegulatoryStructures.Подпорная или заборная стенка;
			if (name == StrРегуляционных сооружений нет)
				return RegulatoryStructures.Регуляционных сооружений нет;
			throw new ArgumentException("Некорректная входная строка", "name");
		}
	}
}
